// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id @default(uuid())
  roleId           Int
  username         String           @unique @db.VarChar(20)
  password         String           @db.VarChar(50)
  name             String
  email            String           @unique
  phoneNumber      String
  address          String
  address2         String?
  address3         String?
  isSubcribedEmail Boolean          @default(false)
  isSubcribedPhone Boolean          @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  accounts         Account[]
  role             Role             @relation(fields: [roleId], references: [id])
  shoppingSession  ShoppingSession?
  order            OrderDetails?
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            String
  provider          String
  providerAccountId String
  type              String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  User        User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product {
  id          Int        @id @default(autoincrement())
  name        String
  shortDesc   String?
  desc        String?
  brand       String?
  SKU         String?
  price       Decimal
  categoryId  Int
  inventoryId Int        @unique
  discountId  Int?       @unique
  images      String[]
  attributes  Json?
  isPublish   Boolean?   @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime   @updatedAt
  category    Category   @relation(fields: [categoryId], references: [id])
  inventory   Inventory  @relation(fields: [inventoryId], references: [id])
  discount    Discount?  @relation(fields: [discountId], references: [id])
  cartItem    CartItem[]
  orderItem   OrderItem?
}

model Discount {
  id        Int      @id @default(autoincrement())
  name      String
  desc      String
  type      String
  value     Decimal
  isActive  Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product?
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime  @updatedAt
}

model Inventory {
  id        Int      @id @default(autoincrement())
  quantity  Int
  product   Product?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime @updatedAt
}

model ShoppingSession {
  id        String     @id @default(uuid())
  userId    String     @unique
  total     Decimal
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  carts     CartItem[]
}

model CartItem {
  id        Int             @id @default(autoincrement())
  sessionId String
  productId Int
  quantity  Int
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  session   ShoppingSession @relation(fields: [sessionId], references: [id])
  product   Product         @relation(fields: [productId], references: [id])
}

model OrderItem {
  id           Int          @id @default(autoincrement())
  orderId      Int          @unique
  productId    Int          @unique
  quantity     Int
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  product      Product      @relation(fields: [productId], references: [id])
  orderDetails OrderDetails @relation(fields: [orderId], references: [id])
}

model OrderDetails {
  id        Int             @id @default(autoincrement())
  userId    String          @unique
  total     Decimal
  paymentId Int
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  user      User            @relation(fields: [userId], references: [id])
  order     OrderItem[]
  payment   PaymentDetails?
}

model PaymentDetails {
  id        Int          @id @default(autoincrement())
  orderId   Int          @unique
  amount    Int
  provider  String
  status    String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  order     OrderDetails @relation(fields: [orderId], references: [id])
}
